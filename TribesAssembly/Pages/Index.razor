@page "/metaselection"
@inject IDatabaseQuery user;
@inject NavigationManager navMan;
@inject PersistentData data;
@inject ServerConnection conn;
@inject DesignHelper helper;


<PageTitle>Index</PageTitle>

@if (currEvent == null)
{
    <section class="card-list">
   @if(queryResult.Count() == 0)
   {
        <!-- meta card -->
       <article class="card" @onclick="() => SelectCategory(EventMetaType.Nature)">
        <header class="card-header">        
          <h2>Nature</h2>
        </header> 
        <img src="/nature.jpg">
      </article>

       <article class="card" @onclick="() => SelectCategory(EventMetaType.Sports)">
        <header class="card-header">        
          <h2>Sports</h2>
        </header>    
         <img src="/sports_bg.jpg">
      </article>

        <article class="card" @onclick="() => SelectCategory(EventMetaType.Travel)">
        <header class="card-header">        
          <h2>Travel</h2>
        </header>
        <img src="/travel2_bg.jpg"> 
      </article>

        <article class="card" @onclick="() => SelectCategory(EventMetaType.Drinking)">
        <header class="card-header">        
          <h2>Food / Drink</h2>
        </header>
         <img src="/food_and_drink_bg.jpg">        
      </article>

        <article class="card" @onclick="() => SelectCategory(EventMetaType.Entertainment)">
        <header class="card-header">        
          <h2>Entertainment</h2>
        </header>
         <img src="/entertainment2_bg.jpg">       
        </article>

    }
    else
    {
     <div class="back-btn">
    <button @onclick="Back">vissza</button>     
    </div>

        @foreach (var item in queryResult)
       {
        <article class="card" @onclick="@(() => SelectEvent(item))">
        <header class="card-header">
            <div class="joined-count">
                <span >@item.PeopleJoined.Count() / @item.MaxAllowed</span>
            </div>
          <p>@item.StartDate</p>
          <h2>@item.EventTitle</h2>
          <p class="activity-description">         
          
            @item.EventDescription                             
        </p>       
        </header>

        
        <div class="tags">
            @if (item.Subtags != null)
           {
               @foreach (var tags in item.Subtags)
                {
                    <p>@tags.TagId.TagName</p>
                } 
           }
        
        </div>
      </article>
       }
    }

    </section>

    @if(state == 0)
    {
         <div class="interact-row">
        <button @onclick="GoToNewEventPage">Létrehoz</button>
        <button @onclick="ToSearch">Keres</button>
        <button @onclick="ToAccount">Profil</button>
    </div>
    } 
}

@if(currEvent != null)
{    
    <div class="back-btn">
    <button @onclick="Back">vissza</button>     
    </div>

    <div class="event-page">
        <h2>@currEvent.EventTitle</h2>     
    </div>
    <div class="event-page">
         <p>@currEvent.EventDescription</p>
    </div>
    <div class="attending-event">
        <h5>Résztvevők:</h5>
        <div>
        <span>férfiak: @currEvent.PeopleJoined.Where(e => e.User.Gender == 0).Count()</span>
        <span>nők: @currEvent.PeopleJoined.Where(e => e.User.Gender == 1).Count()</span>
        </div>      
    </div>
}





@code
{
    int state = 0;
    EventModel? currEvent;
    List<EventModel> queryResult = new List<EventModel>();

    protected override Task OnInitializedAsync()
    {     
        helper.bgDisplayed = false;
        return base.OnInitializedAsync();
    }

    async Task SelectCategory(EventMetaType type)
    {
        queryResult.Clear();
        //queryResult = await user.GetEventsByType(type);
        queryResult = await conn.CreateRequest<EventModel>($"/api/Events/category?id={(int)type}");
        //StateHasChanged();

        if (queryResult.Count == 0) return;

        state = 1;

        helper.SelectBg(type);    
    }

    void SelectEvent(EventModel model)
    {
        currEvent = model;
        state = 2;
        //navMan.NavigateTo("selectedEvent");
    }

    void Back()
    {
        if (state == 1)
        {
            helper.bgDisplayed = false;
            queryResult.Clear();
            state = 0;         
        } 
        else if(state == 2)
        {
            currEvent = null;
            state = 1;
        }
    }

    void GoToNewEventPage()
    {
        navMan.NavigateTo("newevent");
    }

    void ToSearch()
    {
        navMan.NavigateTo("search");
    }

    void ToAccount()
    {
        navMan.NavigateTo("account");
    }
}
